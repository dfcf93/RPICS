module pa3;

import java.io.*;
import java.util.*;
import java.text.DecimalFormat;
/* 
 *  WriterWorker.salsa --
 *  Worker to print a specific letter tfidf
 */
behavior WriterWorker {
    /*   Inputs: A specific letter, a writepath, a hashtable of the tfidf by document, a vector of all the words in the subindexes
     *  Output: None
     *  Process
     *  1. Identify the start and end point in out vector of all words for each specific letter
     *  2. For each word that matches the start letter, check through our hashmaps and if it is present, add it to our output string
     *  3. We print this string to out letter.txt
     */
    void writeTFIDF(String letter, String writePath, Hashtable terms, Vector words) {
        Writer writer = null;
        boolean found;
        int start;
        int end;
        String filename = letter + ".txt";
        String searchWord;
        String wordTFIDF;
        String firstLetter;
        String output;
        String tfidf;
        DecimalFormat df = new DecimalFormat("0.0000");
        df.setMaximumFractionDigits(4);
        try {
            writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(writePath+filename), "utf-8"));
            start = 0;
            end = start;
            found = false;
            for (int i = 0; i<words.size();i++) {
                firstLetter = String.valueOf(words.get(i)).substring(0, 1);
                if (found == false) {
                    if (firstLetter.equals(letter)) {
                        start = i;
                        found = true;
                    }
                } else if (!firstLetter.equals(letter)) {
                    end = i;
                    break;
                } else if (i + 1 == words.size()) {
                    end = i+1;
                }
            }
            for (int i = start; i< end;i++) {
                searchWord = String.valueOf(words.get(i));
                wordTFIDF = searchWord;
                Object[] array = terms.keySet().toArray();
                Arrays.sort(array);
                for (int j = 0; j < array.length;j++) {
                    Hashtable t = ((Hashtable) terms.get(array[j]));
                    if (t.containsKey(searchWord)) {
                        output = String.valueOf(array[j]).replace(".txt", "");
                        tfidf = df.format((double) t.get(searchWord));
                        wordTFIDF += " " + output + " " + tfidf;
                    }
                }
                wordTFIDF += "\n";
                writer.write(wordTFIDF);
            }
            writer.write("\n");
        } catch (IOException ex) {
          standardOutput<-println("[error] Can't write the file " + filename + " for writing.");
        } finally {
            try {
                writer.close();
            } catch (Exception ex) {
                standardOutput<-println("[error] Can't close the file " + filename);
            }
        }
    }
}